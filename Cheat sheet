## Vector and 3 float

  There are different types of vectors type, a vector can be a point vector, which is transformed and rotated, 
  normal, which can only be rotated, or color or none, which ar neither transformed or rotated. 
  
  Attributes like position are stored as point, and vectors as rest are stored as none since we dont want the values to change.
  Vectors are modified by transforms, 3 floats are not.
  
  Theres more information here https://www.sidefx.com/docs/houdini/vex/functions/setattribtypeinfo.html
  
  and the code to change the attrib type is setattribtypeinfo(geoself(), aclass, attrib, atype);
  
  as setattribtypeinfo(0, "point", "myVector", "point");  
  


## Split and get last element from a string
  i@__nameid = atoi(split(@name,"_")[-1]);

## Get transformation matrix
    vector P0 = point(0,"P",0);
    vector P1 = point(0,"P",1);
    vector P2 = point(0,"P",2);

    v@xAxis=normalize(P2-P1);
    v@zAxis=normalize(P1-P0);
    v@yAxis=normalize(cross(@zAxis,@xAxis));

    4@mytransform=set(@xAxis,@yAxis,@zAxis,@P);

    setcomp(@mytransform,0,0,3);
    setcomp(@mytransform,0,1,3);
    setcomp(@mytransform,0,2,3);
    
    ## Apply it
        matrix mytransform = point(1,"mytransform",0);
        v@P*=invert(mytransform);
        v@v*=matrix3(invert(mytransform));
        
        ~~ Using transform by attrb will also multiply custom attributes if wanted
        
## Check attribute exist
    i@hasAttrib = hasattrib(0, "point", "attribName");
    
## Remove particles below geo
    vector ray = {0,1,0};
    
    vector p;
    float u,v;
    int intersect = intersect(1,@P,ray*1e6,p,u,v);
    
    if(intersect !=-1) i@dead = 1;





##Intersection 2 lines
    
    ##PYTHON
A = geo.point(0).position()
B = geo.point(1).position()
C = geo.point(2).position()
D = geo.point(3).position()

A=(A[0],A[2])
B=(B[0],B[2])
C=(C[0],C[2])
D=(D[0],D[2])

def line_intersection(line1, line2):
    xdiff = (line1[0][0] - line1[1][0], line2[0][0] - line2[1][0])
    ydiff = (line1[0][1] - line1[1][1], line2[0][1] - line2[1][1])

    def det(a, b):
        return a[0] * b[1] - a[1] * b[0]

    div = det(xdiff, ydiff)
    if div == 0:
       raise Exception('lines do not intersect')

    d = (det(*line1), det(*line2))
    x = det(d, xdiff) / div
    y = det(d, ydiff) / div
    
    inter=(x,y)
    
    geo.addAttrib(hou.attribType.Global, "inter", inter)
    

print line_intersection((A, B), (C, D))


#Faster implementation with vex (line 1 first input, line 2 second input)

vector dir = point(1,"P",1)-point(1,"P",0);

vector p,uv;

intersect(0,point(1,"P",0),dir,p,uv);

addpoint(0,p);
